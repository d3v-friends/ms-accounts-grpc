// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: account.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	// create
	Create(ctx context.Context, in *ICreateAccount, opts ...grpc.CallOption) (*Account, error)
	// read
	ReadOne(ctx context.Context, in *IReadAccount, opts ...grpc.CallOption) (*Account, error)
	ReadAll(ctx context.Context, in *IReadAccount, opts ...grpc.CallOption) (*AccountAll, error)
	ReadList(ctx context.Context, in *IReadAccountList, opts ...grpc.CallOption) (*AccountList, error)
	// update
	Upsert(ctx context.Context, in *IUpsertAccount, opts ...grpc.CallOption) (*Account, error)
	// delete
	DeleteElem(ctx context.Context, in *IDeleteAccountElem, opts ...grpc.CallOption) (*Account, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Create(ctx context.Context, in *ICreateAccount, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/Accounts/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ReadOne(ctx context.Context, in *IReadAccount, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/Accounts/readOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ReadAll(ctx context.Context, in *IReadAccount, opts ...grpc.CallOption) (*AccountAll, error) {
	out := new(AccountAll)
	err := c.cc.Invoke(ctx, "/Accounts/readAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ReadList(ctx context.Context, in *IReadAccountList, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := c.cc.Invoke(ctx, "/Accounts/readList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Upsert(ctx context.Context, in *IUpsertAccount, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/Accounts/upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteElem(ctx context.Context, in *IDeleteAccountElem, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/Accounts/deleteElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	// create
	Create(context.Context, *ICreateAccount) (*Account, error)
	// read
	ReadOne(context.Context, *IReadAccount) (*Account, error)
	ReadAll(context.Context, *IReadAccount) (*AccountAll, error)
	ReadList(context.Context, *IReadAccountList) (*AccountList, error)
	// update
	Upsert(context.Context, *IUpsertAccount) (*Account, error)
	// delete
	DeleteElem(context.Context, *IDeleteAccountElem) (*Account, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) Create(context.Context, *ICreateAccount) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsServer) ReadOne(context.Context, *IReadAccount) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedAccountsServer) ReadAll(context.Context, *IReadAccount) (*AccountAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedAccountsServer) ReadList(context.Context, *IReadAccountList) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadList not implemented")
}
func (UnimplementedAccountsServer) Upsert(context.Context, *IUpsertAccount) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedAccountsServer) DeleteElem(context.Context, *IDeleteAccountElem) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElem not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICreateAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Create(ctx, req.(*ICreateAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IReadAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/readOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ReadOne(ctx, req.(*IReadAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IReadAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/readAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ReadAll(ctx, req.(*IReadAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IReadAccountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/readList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ReadList(ctx, req.(*IReadAccountList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IUpsertAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Upsert(ctx, req.(*IUpsertAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteElem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDeleteAccountElem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/deleteElem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteElem(ctx, req.(*IDeleteAccountElem))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Accounts_Create_Handler,
		},
		{
			MethodName: "readOne",
			Handler:    _Accounts_ReadOne_Handler,
		},
		{
			MethodName: "readAll",
			Handler:    _Accounts_ReadAll_Handler,
		},
		{
			MethodName: "readList",
			Handler:    _Accounts_ReadList_Handler,
		},
		{
			MethodName: "upsert",
			Handler:    _Accounts_Upsert_Handler,
		},
		{
			MethodName: "deleteElem",
			Handler:    _Accounts_DeleteElem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
