// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: system.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemsClient is the client API for Systems service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemsClient interface {
	// read
	ReadAccountIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountIndex, error)
	// update
	UpdateKeys(ctx context.Context, in *IUpdateKeys, opts ...grpc.CallOption) (*Empty, error)
}

type systemsClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemsClient(cc grpc.ClientConnInterface) SystemsClient {
	return &systemsClient{cc}
}

func (c *systemsClient) ReadAccountIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountIndex, error) {
	out := new(AccountIndex)
	err := c.cc.Invoke(ctx, "/Systems/readAccountIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) UpdateKeys(ctx context.Context, in *IUpdateKeys, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Systems/updateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemsServer is the server API for Systems service.
// All implementations must embed UnimplementedSystemsServer
// for forward compatibility
type SystemsServer interface {
	// read
	ReadAccountIndex(context.Context, *Empty) (*AccountIndex, error)
	// update
	UpdateKeys(context.Context, *IUpdateKeys) (*Empty, error)
	mustEmbedUnimplementedSystemsServer()
}

// UnimplementedSystemsServer must be embedded to have forward compatible implementations.
type UnimplementedSystemsServer struct {
}

func (UnimplementedSystemsServer) ReadAccountIndex(context.Context, *Empty) (*AccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccountIndex not implemented")
}
func (UnimplementedSystemsServer) UpdateKeys(context.Context, *IUpdateKeys) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeys not implemented")
}
func (UnimplementedSystemsServer) mustEmbedUnimplementedSystemsServer() {}

// UnsafeSystemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemsServer will
// result in compilation errors.
type UnsafeSystemsServer interface {
	mustEmbedUnimplementedSystemsServer()
}

func RegisterSystemsServer(s grpc.ServiceRegistrar, srv SystemsServer) {
	s.RegisterService(&Systems_ServiceDesc, srv)
}

func _Systems_ReadAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).ReadAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/readAccountIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).ReadAccountIndex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_UpdateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IUpdateKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).UpdateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/updateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).UpdateKeys(ctx, req.(*IUpdateKeys))
	}
	return interceptor(ctx, in, info, handler)
}

// Systems_ServiceDesc is the grpc.ServiceDesc for Systems service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Systems_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Systems",
	HandlerType: (*SystemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "readAccountIndex",
			Handler:    _Systems_ReadAccountIndex_Handler,
		},
		{
			MethodName: "updateKeys",
			Handler:    _Systems_UpdateKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
